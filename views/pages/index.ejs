<!-- 배너 -->
<div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
    <div class="carousel-inner" style="max-height: 300px; overflow: hidden;">
        <div class="carousel-item active">
        <img class="d-block w-100" src="images/firstBanner.jpg" alt="First slide" style="max-height: initial;  margin-top: -35%;">
        </div>
        <div class="carousel-item">
        <img class="d-block w-100" src="images/secondBanner.jpg" alt="Second slide" style="max-height: initial;  margin-top: -35%;">
        </div>
        <div class="carousel-item">
        <img class="d-block w-100" src="images/thirdBanner.jpg" alt="Third slide" style="max-height: initial;  margin-top: -35%;">
        </div>
    </div>
    <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>
<!-- 배너 끝 -->

<main style="padding: 2rem;">
<!-- 화폐별 간단한 그래프 -->
<div class="container-fluid text-center">
  <h4 class="text-left">오늘의 주요 시세</h4>
  <div class="row" style="padding-top: 2rem;">
    <div class="row-md-3 mx-auto" id="BTCGraph">
      <p class="text-left" id="typeBTC" style="margin-bottom: -0.3rem; font-size: 0.8rem;"></p>
      <p class="text-left" id="priceBTC"></p>
      <script>
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 30, left: 10},
              width = 280 - margin.left - margin.right,
              height = 230 - margin.top - margin.bottom;
          
        // append the svg object to the body of the page
        var svg1 = d3.select("#BTCGraph")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");
        
        //Read the data
        d3.csv('BTC.csv',
        
          // When reading the csv, I must format variables:
          function(d){
            return { date : d3.timeParse("%Y-%m-%d")(d.Date), value : d.Open }
          },
        
          // Now I can use this dataset:
          function(data) {
        
            // Add X axis --> it is a date format
            var x = d3.scaleTime()
              .domain(d3.extent(data, function(d) { return d.date; }))
              .range([ 0, width ]);
            svg1.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add Y axis
            var y = d3.scaleLinear()
              .domain([0, d3.max(data, function(d) { return +d.value; })])
              .range([ height, 0 ]);
            svg1.append("g")
              .call(d3.axisLeft(y).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add the line
            svg1.append("path")
              .datum(data)
              .attr("fill", "none")
              .attr("stroke", "steelblue")
              .attr("stroke-width", 1.5)
              .attr("d", d3.line()
                .x(function(d) { return x(d.date) })
                .y(function(d) { return y(d.value) })
                )
            var p1 = d3.select("#typeBTC")
              .text(`비트코인(BTC/KRW)`)
            var p2 = d3.select("#priceBTC")  
              .text(`현재가: ${data[99].value}원`)
        })    
      </script>
    </div>
    <div class="row-md-3 mx-auto" id="ETHGraph">
      <p class="text-left" id="typeETH" style="margin-bottom: -0.3rem; font-size: 0.8rem;"></p>
      <p class="text-left" id="priceETH"></p>
      <script>
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 30, left: 10},
              width = 280 - margin.left - margin.right,
              height = 230 - margin.top - margin.bottom;
          
        // append the svg object to the body of the page
        var svg2 = d3.select("#ETHGraph")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");
        
        //Read the data
        d3.csv('ETH.csv',
        
          // When reading the csv, I must format variables:
          function(d){
            return { date : d3.timeParse("%Y-%m-%d")(d.Date), value : d.Open }
          },
        
          // Now I can use this dataset:
          function(data) {
        
            // Add X axis --> it is a date format
            var x = d3.scaleTime()
              .domain(d3.extent(data, function(d) { return d.date; }))
              .range([ 0, width ]);
            svg2.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add Y axis
            var y = d3.scaleLinear()
              .domain([0, d3.max(data, function(d) { return +d.value; })])
              .range([ height, 0 ]);
            svg2.append("g")
              .call(d3.axisLeft(y).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add the line
            svg2.append("path")
              .datum(data)
              .attr("fill", "none")
              .attr("stroke", "steelblue")
              .attr("stroke-width", 1.5)
              .attr("d", d3.line()
                .x(function(d) { return x(d.date) })
                .y(function(d) { return y(d.value) })
                )
            var p1 = d3.select("#typeETH")
              .text(`이더리움(ETH/KRW)`)
            var p2 = d3.select("#priceETH")  
              .text(`현재가: ${data[99].value}원`)
        
        })    
      </script>
    </div>
    <div class="row-md-3 mx-auto" id="EOSGraph">
      <p class="text-left" id="typeEOS" style="margin-bottom: -0.3rem; font-size: 0.8rem;"></p>
      <p class="text-left" id="priceEOS"></p>

      <script>
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 30, left: 10},
              width = 280 - margin.left - margin.right,
              height = 230 - margin.top - margin.bottom;
          
        // append the svg object to the body of the page
        var svg3 = d3.select("#EOSGraph")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");
        
        //Read the data
        d3.csv('EOS.csv',
        
          // When reading the csv, I must format variables:
          function(d){
            return { date : d3.timeParse("%Y-%m-%d")(d.Date), value : d.Open }
          },
        
          // Now I can use this dataset:
          function(data) {
        
            // Add X axis --> it is a date format
            var x = d3.scaleTime()
              .domain(d3.extent(data, function(d) { return d.date; }))
              .range([ 0, width ]);
            svg3.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add Y axis
            var y = d3.scaleLinear()
              .domain([0, d3.max(data, function(d) { return +d.value; })])
              .range([ height, 0 ]);
            svg3.append("g")
              .call(d3.axisLeft(y).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add the line
            svg3.append("path")
              .datum(data)
              .attr("fill", "none")
              .attr("stroke", "steelblue")
              .attr("stroke-width", 1.5)
              .attr("d", d3.line()
                .x(function(d) { return x(d.date) })
                .y(function(d) { return y(d.value) })
                )
            var p1 = d3.select("#typeEOS")
              .text(`이오스(EOS/KRW)`)
            var p2 = d3.select("#priceEOS")  
              .text(`현재가: ${data[99].value}원`)
        
        })    
      </script>
    </div>
    <div class="row-md-3 mx-auto" id="XRPGraph">
      <p class="text-left" id="typeXRP" style="margin-bottom: -0.3rem; font-size: 0.8rem;"></p>
      <p class="text-left" id="priceXRP"></p>

      <script>
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 30, left: 10},
              width = 280 - margin.left - margin.right,
              height = 230 - margin.top - margin.bottom;
          
        // append the svg object to the body of the page
        var svg4 = d3.select("#XRPGraph")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");
        
        //Read the data
        d3.csv('XRP.csv',
        
          // When reading the csv, I must format variables:
          function(d){
            return { date : d3.timeParse("%Y-%m-%d")(d.Date), value : d.Open }
          },
        
          // Now I can use this dataset:
          function(data) {
        
            // Add X axis --> it is a date format
            var x = d3.scaleTime()
              .domain(d3.extent(data, function(d) { return d.date; }))
              .range([ 0, width ]);
            svg4.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add Y axis
            var y = d3.scaleLinear()
              .domain([0, d3.max(data, function(d) { return +d.value; })])
              .range([ height, 0 ]);
            svg4.append("g")
              .call(d3.axisLeft(y).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add the line
            svg4.append("path")
              .datum(data)
              .attr("fill", "none")
              .attr("stroke", "steelblue")
              .attr("stroke-width", 1.5)
              .attr("d", d3.line()
                .x(function(d) { return x(d.date) })
                .y(function(d) { return y(d.value) })
                )
            var p1 = d3.select("#typeXRP")
              .text(`리플(XRP/KRW)`)
            var p2 = d3.select("#priceXRP")  
              .text(`현재가: ${data[99].value}원`)
    
        })    
      </script>
    </div>
  </div>
</div>
<!-- 화폐별 간단한 그래프 끝 -->

<!-- 화폐 정보를 담은 테이블 -->
  <div style="padding-top: 2rem">
    <h4>코인 테이블</h4>
    <table class="table table-striped">
      <thead>
        <tr>
          <th scope="col">코인명</th>
          <th scope="col">시가</th>
          <th scope="col">최고가</th>
          <th scope="col">최저가</th>
          <th scope="col">종가</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th scope="row">1</th>
          <td>Mark</td>
          <td>Otto</td>
          <td>@mdo</td>
          <td>@mdo</td>
        </tr>
        <tr>
          <th scope="row">2</th>
          <td>Jacob</td>
          <td>Thornton</td>
          <td>@fat</td>
          <td>@mdo</td>
        </tr>
        <tr>
          <th scope="row">3</th>
          <td>Larry</td>
          <td>the Bird</td>
          <td>@twitter</td>
          <td>@mdo</td>
        </tr>
      </tbody>
    </table>
  </div>
<!-- 화폐 정보를 담은 테이블 끝 -->

<!-- 암호화폐 소식란 -->
  <div class="jumbotron" style="padding-right: 4rem;">
    <h1>관련 소식 내용 등</h1>
    <p>서브 타이틀</p>

    <h2>Variable</h2>
    <p><%= tagline %></p>

    <h2>Loop</h2>
    <ul>
        <% drinks.forEach(function(drink) { %>
            <li><%= drink.name %> - <%= drink.drunkness %></li>
        <% }); %>
    </ul>
  </div>
<!-- 암호화폐 소식란 끝 -->

<!-- 프로젝트 설명 -->
  <div class="text-center" style="padding: 2rem">
    <p><h5>Nodejs를 이용한 모의 암호화폐 거래소 프로젝트입니다.</h5></p>
    <img src="/images/BitFlex-logo.png" alt="">
  </div>
<!-- 프로젝트 설명 끝 -->

</main>