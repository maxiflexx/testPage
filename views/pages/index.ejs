<!-- 배너 -->
<div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
    <div class="carousel-inner" style="max-height: 300px; overflow: hidden;">
        <div class="carousel-item active">
        <img class="d-block w-100" src="images/firstBanner.jpg" alt="First slide" style="max-height: initial;  margin-top: -35%;">
        </div>
        <div class="carousel-item">
        <img class="d-block w-100" src="images/secondBanner.jpg" alt="Second slide" style="max-height: initial;  margin-top: -35%;">
        </div>
        <div class="carousel-item">
        <img class="d-block w-100" src="images/thirdBanner.jpg" alt="Third slide" style="max-height: initial;  margin-top: -35%;">
        </div>
    </div>
    <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>
<!-- 배너 끝 -->

<!-- 암호화폐 소식란 -->
<div class="container-fluid">
  <div class="row" style="padding-top:1rem; padding-bottom: 1rem;">
    <div class="col-md-2" style="padding-left: 4rem;">
      <div style="font-size: 13px; font-weight: bold">암호화폐 뉴스</div>
      <div style="font-size: 12px;"><a href="/news" style="color: gray; text-decoration: none;">전체보기 &#10140;</a></div>
    </div>
    <div class="col-md-4" id="currencyNews">
    </div>
    <div class="col-md-2" style="padding-left: 4rem;">
      <div style="font-size: 13px; font-weight: bold">암호화폐 분석</div>
      <div style="font-size: 12px;"><a href="/news" style="color: gray; text-decoration: none;">전체보기 &#10140;</a></div>
    </div>
    <div class="col-md-4" id="currencyAnalysis">
    </div>
  </div>
  <script type="text/javascript">
    axios.post('/feed/news')
      .then((res) => {
          writeFeed(res.data, '#currencyNews');
      }).catch((err) => {
          alert(err);
      })
    
    axios.post('/feed/analysis')
      .then((res) => {
        writeFeed(res.data, '#currencyAnalysis');
      }).catch((err) => {
        alert(err);
      })

    function writeFeed(items, feedId) {
      for (var i = 0; i < 2; i++) {
        var item = ''
        item += `
          <a href="${items[i].link[0]}" style="color: black;">
            <div style="font-size: 13px;">
              &#9656;	 ${items[i].title[0]}
            </div>
          </a>
        `
        $(feedId).append(item);
      }
    }
  </script>
</div>
<hr>
<!-- 암호화폐 소식란 끝 -->

<main style="padding: 2rem;">
<!-- 화폐별 간단한 그래프 -->
<div class="container-fluid text-center">
  <p class="text-left" style="font-size: 20px; font-weight: bold;">오늘의 주요 시세</p>
  <div class="row" style="padding-top: 2rem;">
    <div class="col-lg-3 col-sm-3 mx-auto" id="BTCGraph">
      <div class="row">
        <div class="col-md-8 text-left">
          <div id="typeBTC" style="margin-bottom: -0.05rem; font-size: 0.8rem; color:gray;"></div>
          <div id="priceBTC" style="font-weight: bold"></div>
        </div>
        <div class="col-md-4 text-right" style="display: flex; flex-direction: column-reverse;">
            <div class="text-center" id="BTCFluctuation" style="color: white; border-radius: 0.5em;"></div>
        </div>
      </div>
      <script>
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 30, left: 10},
              width = 280 - margin.left - margin.right,
              height = 230 - margin.top - margin.bottom;
        
        // append the svg object to the body of the page
        var svg1 = d3.select("#BTCGraph")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");
        
        //Read the data
        d3.csv('BTC.csv',
        
          // When reading the csv, I must format variables:
          function(d){
            return { date : d3.timeParse("%Y-%m-%d")(d.Date), value : d.Open }
          },
        
          // Now I can use this dataset:
          function(data) {
        
            // Add X axis --> it is a date format
            var x = d3.scaleTime()
              .domain(d3.extent(data, function(d) { return d.date; }))
              .range([ 0, width ]);
            svg1.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add Y axis
            var y = d3.scaleLinear()
              .domain([0, d3.max(data, function(d) { return +d.value; })])
              .range([ height, 0 ]);
            svg1.append("g")
              .call(d3.axisLeft(y).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add the line
            svg1.append("path")
              .datum(data)
              .attr("fill", "none")
              .attr("stroke", "steelblue")
              .attr("stroke-width", 1.5)
              .attr("d", d3.line()
                .x(function(d) { return x(d.date) })
                .y(function(d) { return y(d.value) })
                )
            var div1 = d3.select("#typeBTC")
              .text(`비트코인(BTC/KRW)`)
            var div2 = d3.select("#priceBTC")  
              .text(`현재가: ${numberWithCommas(data[0].value)}원`)
            var value = ((data[0].value - data[1].value) / data[1].value) * 100
            var div3 = d3.select("#BTCFluctuation")
            if (value >= 0) {
              console.log(value)
              div3.style("background-color", "red")
                .text(`+${value.toFixed(2)}%`)
            } else {
              div3.style("background-color", "blue")
                .text(`${value.toFixed(2)}%`)
            };
        })
      </script>
    </div>
    <div class="col-lg-3 col-sm-3 mx-auto" id="ETHGraph">
      <div class="row">
        <div class="col-md-8 text-left">
          <div id="typeETH" style="margin-bottom: -0.05rem; font-size: 0.8rem; color:gray;"></div>
          <div id="priceETH" style="font-weight: bold;"></div>
        </div>
        <div class="col-md-4 text-right" style="display: flex; flex-direction: column-reverse;">
          <div class="text-center" id="ETHFluctuation" style="color: white; border-radius: 0.5em;"></div>
        </div>
      </div>
      <script>
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 30, left: 10},
              width = 280 - margin.left - margin.right,
              height = 230 - margin.top - margin.bottom;
          
        // append the svg object to the body of the page
        var svg2 = d3.select("#ETHGraph")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");
        
        //Read the data
        d3.csv('ETH.csv',
        
          // When reading the csv, I must format variables:
          function(d){
            return { date : d3.timeParse("%Y-%m-%d")(d.Date), value : d.Open }
          },
        
          // Now I can use this dataset:
          function(data) {
        
            // Add X axis --> it is a date format
            var x = d3.scaleTime()
              .domain(d3.extent(data, function(d) { return d.date; }))
              .range([ 0, width ]);
            svg2.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add Y axis
            var y = d3.scaleLinear()
              .domain([0, d3.max(data, function(d) { return +d.value; })])
              .range([ height, 0 ]);
            svg2.append("g")
              .call(d3.axisLeft(y).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add the line
            svg2.append("path")
              .datum(data)
              .attr("fill", "none")
              .attr("stroke", "steelblue")
              .attr("stroke-width", 1.5)
              .attr("d", d3.line()
                .x(function(d) { return x(d.date) })
                .y(function(d) { return y(d.value) })
                )
            var div1 = d3.select("#typeETH")
              .text(`이더리움(ETH/KRW)`)
            var div2 = d3.select("#priceETH")  
              .text(`현재가: ${numberWithCommas(data[0].value)}원`)
            var value = ((data[0].value - data[1].value) / data[1].value) * 100
            var div3 = d3.select("#ETHFluctuation")
            if (value >= 0) {
              console.log(value)
              div3.style("background-color", "red")
                .text(`+${value.toFixed(2)}%`)
            } else {
              div3.style("background-color", "blue")
                .text(`${value.toFixed(2)}%`)
            };
        })    
      </script>
    </div>
    <div class="col-lg-3 col-sm-3 mx-auto" id="EOSGraph">
      <div class="row">
        <div class="col-md-8 text-left">
          <div id="typeEOS" style="margin-bottom: -0.05rem; font-size: 0.8rem; color:gray;"></div>
          <div id="priceEOS" style="font-weight: bold;"></div>
        </div>
        <div class="col-md-4 text-right" style="display: flex; flex-direction: column-reverse;">
          <div class="text-center" id="EOSFluctuation" style="color: white; border-radius: 0.5em;"></div>
        </div>
      </div>
      <script>
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 30, left: 10},
              width = 280 - margin.left - margin.right,
              height = 230 - margin.top - margin.bottom;
          
        // append the svg object to the body of the page
        var svg3 = d3.select("#EOSGraph")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");
        
        //Read the data
        d3.csv('EOS.csv',
        
          // When reading the csv, I must format variables:
          function(d){
            return { date : d3.timeParse("%Y-%m-%d")(d.Date), value : d.Open }
          },
        
          // Now I can use this dataset:
          function(data) {
        
            // Add X axis --> it is a date format
            var x = d3.scaleTime()
              .domain(d3.extent(data, function(d) { return d.date; }))
              .range([ 0, width ]);
            svg3.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add Y axis
            var y = d3.scaleLinear()
              .domain([0, d3.max(data, function(d) { return +d.value; })])
              .range([ height, 0 ]);
            svg3.append("g")
              .call(d3.axisLeft(y).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add the line
            svg3.append("path")
              .datum(data)
              .attr("fill", "none")
              .attr("stroke", "steelblue")
              .attr("stroke-width", 1.5)
              .attr("d", d3.line()
                .x(function(d) { return x(d.date) })
                .y(function(d) { return y(d.value) })
                )
            var div1 = d3.select("#typeEOS")
              .text(`이오스(EOS/KRW)`)
            var div2 = d3.select("#priceEOS")  
              .text(`현재가: ${numberWithCommas(data[0].value)}원`)
            var value = ((data[0].value - data[1].value) / data[1].value) * 100
            var div3 = d3.select("#EOSFluctuation")
            if (value >= 0) {
              console.log(value)
              div3.style("background-color", "red")
                .text(`+${value.toFixed(2)}%`)
            } else {
              div3.style("background-color", "blue")
                .text(`${value.toFixed(2)}%`)
            };
        })    
      </script>
    </div>
    <div class="col-lg-3 col-sm-3 mx-auto" id="XRPGraph">
      <div class="row">
        <div class="col-md-8 text-left">
          <div id="typeXRP" style="margin-bottom: -0.05rem; font-size: 0.8rem; color:gray;"></div>
          <div id="priceXRP" style="font-weight: bold;"></div>  
        </div>
        <div class="col-md-4 text-right" style="display: flex; flex-direction: column-reverse;">
          <div class="text-center" id="XRPFluctuation" style="color: white; border-radius: 0.5em;"></div>
        </div>
      </div>
      <script>
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 30, left: 10},
              width = 280 - margin.left - margin.right,
              height = 230 - margin.top - margin.bottom;
          
        // append the svg object to the body of the page
        var svg4 = d3.select("#XRPGraph")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");
        
        //Read the data
        d3.csv('XRP.csv',
        
          // When reading the csv, I must format variables:
          function(d){
            return { date : d3.timeParse("%Y-%m-%d")(d.Date), value : d.Open }
          },
        
          // Now I can use this dataset:
          function(data) {
        
            // Add X axis --> it is a date format
            var x = d3.scaleTime()
              .domain(d3.extent(data, function(d) { return d.date; }))
              .range([ 0, width ]);
            svg4.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add Y axis
            var y = d3.scaleLinear()
              .domain([0, d3.max(data, function(d) { return +d.value; })])
              .range([ height, 0 ]);
            svg4.append("g")
              .call(d3.axisLeft(y).tickFormat(function(d) { return "" }).tickSize(0));
        
            // Add the line
            svg4.append("path")
              .datum(data)
              .attr("fill", "none")
              .attr("stroke", "steelblue")
              .attr("stroke-width", 1.5)
              .attr("d", d3.line()
                .x(function(d) { return x(d.date) })
                .y(function(d) { return y(d.value) })
                )
            var div1 = d3.select("#typeXRP")
              .text(`리플(XRP/KRW)`)
            var div2 = d3.select("#priceXRP")  
              .text(`현재가: ${numberWithCommas(data[0].value)}원`)
            var value = ((data[0].value - data[1].value) / data[1].value) * 100
            var div3 = d3.select("#XRPFluctuation")
            if (value >= 0) {
              console.log(value)
              div3.style("background-color", "red")
                .text(`+${value.toFixed(2)}%`)
            } else {
              div3.style("background-color", "blue")
                .text(`${value.toFixed(2)}%`)
            };
        })    
      </script>
    </div>
  </div>
</div>
<!-- 화폐별 간단한 그래프 끝 -->

<!-- 화폐 정보를 담은 테이블 -->
  <div style="padding-top: 2rem">
    <p style="padding-bottom: 1rem; font-size: 20px; font-weight: bold;">업비트 코인 거래</p>
    <table class="table table-striped" style="text-align: center;">
      <thead>
        <tr style="color: gray; font-size: 13px;">
          <th scope="col">코인명</th>
          <th scope="col">시가</th>
          <th scope="col">전일대비(24h)</th>
          <th scope="col">최고가(24h)</th>
          <th scope="col">최저가(24h)</th>
          <th scope="col">종가(24h)</th>
          <th scope="col">거래량(24h)</th>
        </tr>
      </thead>
      <tbody>
        <tr id="BTCInfo"></tr>
        <tr id="ETHInfo"></tr>
        <tr id="EOSInfo"></tr>
        <tr id="XRPInfo"></tr>
      </tbody>
    </table>
  </div>
  <script type="text/javascript">
    axios.get('BTC.csv')
      .then((result) => {
        writeData(result.data, "BTC");
      }).catch((err) => {
        alert(err)
      })
    
    axios.get('ETH.csv')
      .then((result) => {
        writeData(result.data, "ETH");
      }).catch((err) => {
        alert(err)
      })
    
    axios.get('EOS.csv')
      .then((result) => {
        writeData(result.data, "EOS");
      }).catch((err) => {
        alert(err)
      })
    
    axios.get('XRP.csv')
      .then((result) => {
        writeData(result.data, "XRP");
      }).catch((err) => {
        alert(err)
      })
    
    function writeData(data, currency) {
      var allRows = data.split(/\r?\n|\r/);
      var coinName = {
        BTC: "비트코인",
        ETH: "이더리움",
        EOS: "이오스",
        XRP: "리플"
      };
      var todayData = allRows[1].split(',');
      var yesterdayPrice = allRows[2].split(',')[1]
      var row = `
        <td>
          <div style="font-size: 13px; font-weight: bold">${currency}/KRW</div>
          <div style="font-size: 12px; color: gray;">${coinName[currency]}</div>
        </td>`;
      for (var i = 1; i < todayData.length; i++) {
        row += `<td style="vertical-align: middle; font-size: 13px; font-weight: bold;">${numberWithCommas(todayData[i])}</td>`
        if (i === 1) {
          row += fluctuation(todayData[i], yesterdayPrice)
        }
      };
      $(`#${currency}Info`).append(row);
    }

    function fluctuation(today, yesterday) {
      var value = ((today - yesterday) / yesterday) * 100;
      if (value > 0) {
        return `<td style="color: red; vertical-align: middle; font-size: 13px; font-weight: bold;">+${value.toFixed(2)}%</td>`
      } else {
        return `<td style="color: blue; vertical-align: middle; font-size: 13px; font-weight: bold;">${value.toFixed(2)}%</td>`
      }
    }
    function numberWithCommas(x) {
      x = Math.round(x)
      return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
  </script>
<!-- 화폐 정보를 담은 테이블 끝 -->

<!-- 프로젝트 설명 -->
  <div class="text-center" style="padding: 2rem">
    <p><h5>Nodejs를 이용한 모의 암호화폐 거래소 프로젝트입니다.</h5></p>
    <img src="/images/BitFlex-logo.png" alt="">
  </div>
<!-- 프로젝트 설명 끝 -->

</main>